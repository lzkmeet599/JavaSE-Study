/*多态性*/
//体现1：方法的重载-----相同的名称方法实现不同的逻辑
//体现2：方法的重写-----当需要修改父类方法进行继承时，有其他子类调用父类的方法，那么通过重写父类方法来修改
//体现3：对象的多态-----子类可以看作特殊的父类，父类类型的引用可以指向子类的对象
Person p=new Person();
Person e=new Student();//Person类型的变量e，指向Student类型的对象
//一个引用类型变量如果声明为父类的类型，但实际引用的是子类的对象，那么该变量就不能访问子类中添加的属性和方法
Person e=new Student();
e.school="xxxx";//非法访问。Person类中没有school属性，school是Student类中添加的属性
//虚拟方法调用：与上面的不同，父类类型的引用可以调用子类的方法，前提是子类有父类方法的重写。
Person e=new Student();
e.showInfo();//合法，调用的是Student类中的showInfo方法