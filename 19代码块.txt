/*代码块*/
//
public class test1 {		
	
	public  test1() {
		this.name="张三";
		System.out.println("执行的是构造代码块 ");
	}
	
	String name;
	static int age;
	//非静态代码块
	{
		this.name="张三";
		System.out.println("执行的是非静态代码块1");
	}
	
	{
		System.out.println("执行的是非静态代码块2");
	}
	
	{
		System.out.println("执行的是非静态代码块3");
	}
	//静态代码块
	static {//用于初始化静态成员变量，只能访问static修饰的成员变量和方法
		System.out.println("执行的是静态代码块1");
	}
}
//实例化两个对象后的输出结果 静态代码块只执行一次，非静态代码块每次都要执行，执行顺序按照声明的顺序
//执行的是静态代码块1
//执行的是非静态代码块1
//执行的是非静态代码块2
//执行的是非静态代码块3
//执行的是构造代码块 
//执行的是非静态代码块1
//执行的是非静态代码块2
//执行的是非静态代码块3
//执行的是构造代码块 

//非静态代码块使用场景--匿名内部类
public class Test2 {
	public static void main(String[] args) {
		
		//匿名内部类---test1 t = new test1() {[在大括号中按alt+/就会创建匿名内部类]};，大括号外面要加分号。
		test1 t = new test1() {//构建了一个没有类名的test1子类，也就是匿名的test1子类
			//这种类没有类名，就不能显示的使用new的方法创建对象，如果还要在构造器中初始化属性就没有办法
			//这样就需要代码块来进行初始化属性的工作
			//问题  现在想把name改成李四，但是不想动test1的代码
			{//用代码块代替构造方法
				name="李四";
			}
//			@Override
//			public void test() {
//				System.out.println("======");
//			}
		};
		
		System.out.println(t.name);
		t.test();
	}
	
}
//输出
//执行的是静态代码块1
//执行的是非静态代码块1 
//执行的是非静态代码块2
//执行的是非静态代码块3
//执行的是构造代码块 
//李四
//Person类的test方法












